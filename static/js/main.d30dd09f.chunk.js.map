{"version":3,"sources":["components/Memory-card.js","App.js","index.js"],"names":["MemoryCard","useState","guesses","setGuesses","score","setScore","topScore","setTopScore","images","setImages","randomOrder","temporaryValue","randomIndex","array","concat","currentIndex","length","Math","floor","random","key","id","className","map","image","onClick","guess","guessTemp","includes","handleChoice","style","backgroundImage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAgGeA,EA9FI,WAAO,IAAD,EACOC,mBAAS,IADhB,mBAChBC,EADgB,KACPC,EADO,OAEGF,mBAAS,GAFZ,mBAEhBG,EAFgB,KAETC,EAFS,OAGSJ,mBAAS,GAHlB,mBAGhBK,EAHgB,KAGNC,EAHM,OAIKN,mBAAS,CACnC,CAAC,kBAAmB,aAAc,SAClC,CAAC,kBAAmB,YAAa,yBACjC,CAAC,mBAAoB,YAAa,SAClC,CAAC,kBAAmB,iBAAkB,uBACtC,CAAC,kBAAmB,oBAAqB,WACzC,CAAC,kBAAmB,mBAAoB,SACxC,CAAC,kBAAmB,kBAAmB,WACvC,CAAC,kBAAmB,aAAc,WAClC,CAAC,kBAAmB,aAAc,SAClC,CAAC,mBAAoB,eAAgB,SACrC,CAAC,mBAAoB,eAAgB,mBACrC,CAAC,mBAAoB,aAAc,mBAhBd,mBAIhBO,EAJgB,KAIRC,EAJQ,KAmBjBC,EAAc,WAOlB,IANA,IAGEC,EACAC,EAJEC,EAAQ,GAAGC,OAAON,GAElBO,EAAeF,EAAMG,OAIlB,IAAMD,GACXH,EAAcK,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCJ,EAAiBE,EAFjBE,GAAgB,GAGhBF,EAAME,GAAgBF,EAAMD,GAC5BC,EAAMD,GAAeD,EAGvBF,EAAUI,IAsBRO,EAAM,EAEV,OACE,6BACE,wBAAIC,GAAG,cAAP,eACA,wBAAIC,UAAU,oBAAd,gFAKA,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,UAAoClB,GACpC,0CAAgBE,IAGlB,yBAAKgB,UAAU,cACZd,EAAOe,KAAI,SAACC,GAAD,OACV,yBACEC,QAAS,kBArCA,SAACC,GAClB,IAAIC,EAAYzB,EAEZyB,EAAUC,SAASF,IACrBhB,IACAP,EAAW,IACPC,EAAQE,GACVC,EAAYH,GACZC,EAAS,IAETA,EAAS,KAGXK,IACAL,EAASD,EAAQ,GACjBD,EAAWwB,EAAUb,OAAOY,KAsBPG,CAAaL,EAAM,KAClCJ,IAAKA,IACLE,UAAU,kBAEV,yBACEA,UAAU,cACVQ,MAAO,CACLC,gBAAgB,OAAD,OAASP,EAAM,GAAf,QAGnB,wBAAIF,UAAU,aAAd,SAAiCE,EAAM,IACvC,wBAAIF,UAAU,aAAd,eAAuCE,EAAM,WC7E1CQ,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCFNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d30dd09f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst MemoryCard = () => {\n  const [guesses, setGuesses] = useState([]);\n  const [score, setScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [images, setImages] = useState([\n    [\"images/img1.jpg\", \"Seth Rogan\", \"Actor\"],\n    [\"images/img2.png\", \"Joe Rogan\", \"Comedian, Commentator\"],\n    [\"images/img3.jpeg\", \"Tom Hanks\", \"Actor\"],\n    [\"images/img4.jpg\", \"Dwanye Johnson\", \"Actor, Pro Wrestler\"],\n    [\"images/img5.jpg\", \"Jennifer Lawrence\", \"Actress\"],\n    [\"images/img6.jpg\", \"Chadwick Boseman\", \"Actor\"],\n    [\"images/img7.jpg\", \"Natalie Portman\", \"Actress\"],\n    [\"images/img8.jpg\", \"Emma Stone\", \"Actress\"],\n    [\"images/img9.jpg\", \"Jonah Hill\", \"Actor\"],\n    [\"images/img10.jpg\", \"Michael Cera\", \"Actor\"],\n    [\"images/img11.jpg\", \"Adam Sandler\", \"Actor, Comedian\"],\n    [\"images/img12.jpg\", \"Will Smith\", \"Actor, Rapper\"],\n  ]);\n\n  const randomOrder = () => {\n    let array = [].concat(images);\n\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    setImages(array);\n  };\n\n  let handleChoice = (guess) => {\n    let guessTemp = guesses;\n\n    if (guessTemp.includes(guess)) {\n      randomOrder();\n      setGuesses([]);\n      if (score > topScore) {\n        setTopScore(score);\n        setScore(0);\n      } else {\n        setScore(0);\n      }\n    } else {\n      randomOrder();\n      setScore(score + 1);\n      setGuesses(guessTemp.concat(guess));\n    }\n  };\n\n  let key = 0;\n\n  return (\n    <div>\n      <h1 id=\"game-title\">Memory card</h1>\n      <h2 className=\"game-description\">\n        Click on celebrities to raise your score but don't click any more than\n        once!\n      </h2>\n\n      <div className=\"score-div\">\n        <h2 className=\"score-count\">Score: {score}</h2>\n        <h2>Top Score: {topScore}</h2>\n      </div>\n\n      <div className=\"celeb-grid\">\n        {images.map((image) => (\n          <div\n            onClick={() => handleChoice(image[1])}\n            key={key++}\n            className=\"card-container\"\n          >\n            <div\n              className=\"celeb-image\"\n              style={{\n                backgroundImage: `url(${image[0]})`,\n              }}\n            ></div>\n            <h3 className=\"card-info\">Name: {image[1]}</h3>\n            <h5 className=\"card-info\">Occupation: {image[2]}</h5>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryCard;\n","import React from \"react\";\nimport MemoryCard from \"./components/Memory-card\";\n\nfunction App() {\n  return (\n    <div>\n      <MemoryCard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}